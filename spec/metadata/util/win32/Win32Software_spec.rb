require "metadata/util/win32/Win32Software"

RSpec.describe MiqWin32::Software do
  describe ".DecodeProductKey" do
    let(:raw_product_key) do
      "??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??," \
      "??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??," \
      "??,??,bb,e0,11,a1,1b,29,3e,a4,d5,c3,97,04,1c,7b,02,00,??,??,??,??,??,??,??," \
      "??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??," \
      "??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??," \
      "??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??,??," \
      "??,??,??,??,??,??,??,??,??,??,??,??,??,??"
    end

    it "handles blanks" do
      expect(described_class.DecodeProductKey(nil)).to be_nil
      expect(described_class.DecodeProductKey("")).to be_nil
    end

    it "handles an invalid length" do
      key = raw_product_key.split(",")[0, 66].join(",")
      expect(described_class.DecodeProductKey(key)).to be_nil
    end

    it "decodes the product key" do
      expect(described_class.DecodeProductKey(raw_product_key)).to eq("PX4FW-XP3BB-7Q99T-VVTPQ-XV8VF")
    end
  end
end
